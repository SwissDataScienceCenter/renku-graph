apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ include "graph.fullname" . }}
  labels:
    app: {{ template "graph.name" . }}
    chart: {{ template "graph.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: {{ include "graph.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ include "graph.name" . }}
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}-token-repository
          image: "{{ .Values.tokenRepository.image.repository }}:{{ .Values.tokenRepository.image.tag }}"
          imagePullPolicy: {{ .Values.tokenRepository.image.pullPolicy }}
          env:
            - name: TOKEN_ENCRYPTION_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ template "graph.fullname" . }}
                  key: tokenRepository-tokenEncryption-secret
            - name: POSTGRES_HOST
              value: "{{ template "postgresql.fullname" . }}:5432"
            - name: POSTGRES_USER
              {{- if .Values.global.tokenRepository.postgresUser }}
              value: {{ .Values.global.tokenRepository.postgresUser }}
              {{- else }}
              value: tokenstorage
              {{- end }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "renku.fullname" . }}
                  key: tokenRepository-postgresPassword
          ports:
            - name: http1
              containerPort: 9003
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /ping
              port: http1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            httpGet:
              path: /ping
              port: http1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          resources:
  {{ toYaml .Values.resources | indent 12 }}
        - name: {{ .Chart.Name }}-triples-generator
          image: "{{ .Values.triplesGenerator.image.repository }}:{{ .Values.triplesGenerator.image.tag }}"
          imagePullPolicy: {{ .Values.triplesGenerator.image.pullPolicy }}
          env:
            - name: FILE_EVENT_LOG_PATH
              value: /events/log.txt
            - name: PLAY_APPLICATION_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ template "graph.fullname" . }}
                  key: triplesGenerator-play-secret
            - name: GITLAB_BASE_URL
              value: {{ .Values.gitlab.url }}
            - name: JENA_DATASET_NAME
              {{- if .Values.global.jena.dataset }}
              value: {{ .Values.global.jena.dataset }}
              {{- else }}
              value: renku
              {{- end }}
            - name: JENA_BASE_URL
              value: "http://{{ template "jena.fullname" . }}:{{ .Values.jena.service.port }}"
            - name: JENA_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "jena.fullname" . }}
                  key: jena-admin-password
          ports:
            - name: http1
              containerPort: 9000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /ping
              port: http1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            httpGet:
              path: /ping
              port: http1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          volumeMounts:
          - name: file-event-log
            mountPath: /events
          resources:
{{ toYaml .Values.resources | indent 12 }}
        - name: {{ .Chart.Name }}-webhook-service
          image: "{{ .Values.webhookService.image.repository }}:{{ .Values.webhookService.image.tag }}"
          imagePullPolicy: {{ .Values.webhookService.image.pullPolicy }}
          env:
            - name: FILE_EVENT_LOG_PATH
              value: /events/log.txt
            - name: PLAY_APPLICATION_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ template "graph.fullname" . }}
                  key: webhookService-play-secret
            - name: GITLAB_BASE_URL
              value: {{ .Values.gitlab.url }}
            - name: SELF_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: SELF_URL
              {{- if .Values.global.renku.domain }}
              value: {{ template "http" . }}://{{ .Values.global.renku.domain }}
              {{- else }}
              value: {{ printf "http://$(SELF_IP):9001" | quote }}
              {{- end }}
          command:
            - bin/webhook-service
            - -Dhttp.port=9001
          ports:
            - name: http2
              containerPort: 9001
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /ping
              port: http2
          readinessProbe:
            httpGet:
              path: /ping
              port: http2
          volumeMounts:
          - name: file-event-log
            mountPath: /events
          resources:
{{ toYaml .Values.resources | indent 12 }}
      volumes:
        - name: file-event-log
        {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim | default (include "graph.fullname" .) }}
        {{- else }}
          emptyDir: {}
        {{- end }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
