name: Test, deploy and Renku test
on:
  push:
    branches:
      - development
      - release
      - 'hotfix-[0-9]+.[0-9]+**'
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
env:
  SBT_OPTS: "-Xmx2G"
jobs:
  cleanup-previous-runs:
    name: Cleanup previous runs
    runs-on: ubuntu-latest
    if: github.event.action != 'closed'
    steps:
      - uses: rokroskar/workflow-run-cleanup-action@v0.3.0
        env:
          GITHUB_TOKEN: "${{ secrets.RENKUBOT_GITHUB_TOKEN }}"
  conventional-commits:
    name: Commit message check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: amannn/action-semantic-pull-request@v1.1.1
        env:
          GITHUB_TOKEN: ${{ secrets.RENKUBOT_GITHUB_TOKEN }}
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: cleanup-previous-runs
    steps:
      - uses: actions/checkout@v3
      - name: JDK set-up
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Setup cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.ivy2
            ~/.sbt
          key: ${{ runner.os }}-sbt-${{ hashFiles('**/build.sbt') }}
      - name: Unit test
        run: sbt -Dsbt.color=always -Dsbt.supershell=false clean test
  acceptance-tests:
    name: Acceptance Tests
    runs-on: ubuntu-latest
    needs: cleanup-previous-runs
    steps:
      - uses: actions/checkout@v3
      - name: JDK set-up
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Setup cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.ivy2
            ~/.sbt
          key: ${{ runner.os }}-sbt-${{ hashFiles('**/build.sbt') }}
      - name: Acceptance tests
        run: sbt -Dsbt.color=always -Dsbt.supershell=false "project acceptance-tests" clean test
  formatter:
    name: Formatter
    runs-on: ubuntu-latest
    needs: cleanup-previous-runs
    steps:
      - uses: actions/checkout@v3
      - name: JDK set-up
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Setup cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.ivy2
            ~/.sbt
          key: ${{ runner.os }}-sbt-${{ hashFiles('**/build.sbt') }}
      - name: Formatter
        run: sbt scalafmtCheck
  deploy-to-graph:
    name: Deploy to renku-graph
    runs-on: ubuntu-20.04
    needs: [ unit-tests, acceptance-tests, formatter ]
    if: "github.ref == 'refs/heads/development'"
    environment:
      name: renku-kg-dev
    steps:
      - name: deploy-development
        uses: SwissDataScienceCenter/renku-actions/deploy-renku@v0.5.3
        env:
          DOCKER_PASSWORD: ${{ secrets.RENKU_DOCKER_PASSWORD }}
          DOCKER_USERNAME: ${{ secrets.RENKU_DOCKER_USERNAME }}
          GITLAB_TOKEN: ${{ secrets.DEV_GITLAB_TOKEN }}
          KUBECONFIG: "${{ github.workspace }}/renkubot-kube.config"
          RANCHER_PROJECT_ID: ${{ secrets.CI_RANCHER_PROJECT }}
          RENKU_RELEASE: renku-kg-dev
          RENKU_VALUES_FILE: "${{ github.workspace }}/values.yaml"
          RENKU_VALUES: ${{ secrets.CI_RENKU_KG_VALUES }}
          RENKUBOT_KUBECONFIG: ${{ secrets.RENKUBOT_DEV_KUBECONFIG }}
          RENKUBOT_RANCHER_BEARER_TOKEN: ${{ secrets.RENKUBOT_RANCHER_BEARER_TOKEN }}
          RANCHER_DEV_API_ENDPOINT: ${{ secrets.RANCHER_DEV_API_ENDPOINT }}
          RENKU_BOT_DEV_PASSWORD: ${{ secrets.RENKU_BOT_DEV_PASSWORD }}
          RENKU_ANONYMOUS_SESSIONS: true
          RENKU_TESTS_ENABLED: true
          TEST_ARTIFACTS_PATH: "tests-artifacts-${{ github.sha }}"
          renku_graph: "@development"
          renku: "@master"
  renku-acceptance-tests:
    name: Renku Acceptance Tests
    runs-on: ubuntu-20.04
    needs: deploy-to-graph
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Test graph HEAD
        env:
          KUBECONFIG: ${{ github.workspace }}/renkubot-kube.config
          RENKUBOT_KUBECONFIG: ${{ secrets.RENKUBOT_DEV_KUBECONFIG }}
          RENKU_RELEASE: renku-kg-dev
        run: |
          echo "$RENKUBOT_KUBECONFIG" > ${{ github.workspace }}/renkubot-kube.config
          helm test ${RENKU_RELEASE} --namespace ${RENKU_RELEASE} --timeout 140m --logs
      - name: Download artifact for packaging on failure
        if: failure()
        uses: SwissDataScienceCenter/renku-actions/download-test-artifacts@v0.5.3
        env:
          RENKU_VALUES: ${{ secrets.CI_RENKU_VALUES }}
          TEST_ARTIFACTS_PATH: "tests-artifacts-${{ github.sha }}"
      - name: Upload screenshots on failure
        if: failure()
        uses: actions/upload-artifact@v1
        with:
          name: acceptance-test-artifacts
          path: ${{ github.workspace }}/test-artifacts/
